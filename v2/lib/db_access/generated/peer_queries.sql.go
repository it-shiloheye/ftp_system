// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: peer_queries.sql

package db_access

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const connectClient = `-- name: ConnectClient :one
SELECT id, peer_id, ip_address, peer_role, peer_name, creation_time, pem, peer_config
FROM peers_table
WHERE peer_id = $1
`

// ConnectClient
//
//	SELECT id, peer_id, ip_address, peer_role, peer_name, creation_time, pem, peer_config
//	FROM peers_table
//	WHERE peer_id = $1
func (q *Queries) ConnectClient(ctx context.Context, db DBTX, peerID pgtype.UUID) (*PeersTable, error) {
	row := db.QueryRow(ctx, connectClient, peerID)
	var i PeersTable
	err := row.Scan(
		&i.ID,
		&i.PeerID,
		&i.IpAddress,
		&i.PeerRole,
		&i.PeerName,
		&i.CreationTime,
		&i.Pem,
		&i.PeerConfig,
	)
	return &i, err
}

const createClient = `-- name: CreateClient :one
INSERT INTO peers_table(peer_id,peer_role,peer_name,pem, peer_config,ip_address)
VALUES (default, $1, $2, $3, $4, $5)
RETURNING id, peer_id, ip_address, peer_role, peer_name, creation_time, pem, peer_config
`

type CreateClientParams struct {
	PeerRole   NullPeerRoleType `json:"peer_role"`
	PeerName   *string          `json:"peer_name"`
	Pem        []byte           `json:"pem"`
	PeerConfig []byte           `json:"peer_config"`
	IpAddress  string           `json:"ip_address"`
}

// CreateClient
//
//	INSERT INTO peers_table(peer_id,peer_role,peer_name,pem, peer_config,ip_address)
//	VALUES (default, $1, $2, $3, $4, $5)
//	RETURNING id, peer_id, ip_address, peer_role, peer_name, creation_time, pem, peer_config
func (q *Queries) CreateClient(ctx context.Context, db DBTX, arg *CreateClientParams) (*PeersTable, error) {
	row := db.QueryRow(ctx, createClient,
		arg.PeerRole,
		arg.PeerName,
		arg.Pem,
		arg.PeerConfig,
		arg.IpAddress,
	)
	var i PeersTable
	err := row.Scan(
		&i.ID,
		&i.PeerID,
		&i.IpAddress,
		&i.PeerRole,
		&i.PeerName,
		&i.CreationTime,
		&i.Pem,
		&i.PeerConfig,
	)
	return &i, err
}
