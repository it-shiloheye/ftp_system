// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: upload_queries.sql

package db_access

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const checkChangesStepOne = `-- name: CheckChangesStepOne :exec
SELECT DISTINCT file_metadata.file_path, file_metadata.file_data_id, file_data.file_hash,file_metadata.mod_time FROM file_metadata
JOIN file_data ON file_metadata.file_data_id = file_data.id
ORDER BY
    file_metadata.file_data_id DESC,
    file_metadata.mod_time DESC
`

// CheckChangesStepOne
//
//	SELECT DISTINCT file_metadata.file_path, file_metadata.file_data_id, file_data.file_hash,file_metadata.mod_time FROM file_metadata
//	JOIN file_data ON file_metadata.file_data_id = file_data.id
//	ORDER BY
//	    file_metadata.file_data_id DESC,
//	    file_metadata.mod_time DESC
func (q *Queries) CheckChangesStepOne(ctx context.Context, db DBTX) error {
	_, err := db.Exec(ctx, checkChangesStepOne)
	return err
}

const updateFileTrackerMarkUploaded = `-- name: UpdateFileTrackerMarkUploaded :exec
INSERT INTO file_tracker (
    peer_id,
    file_meta_id,
    current_hash_id,
    file_state
) VALUES ($1, $2, $3, 'uploaded')
`

type UpdateFileTrackerMarkUploadedParams struct {
	PeerID        uuid.UUID `json:"peer_id"`
	FileMetaID    int32     `json:"file_meta_id"`
	CurrentHashID int32     `json:"current_hash_id"`
}

// UpdateFileTrackerMarkUploaded
//
//	INSERT INTO file_tracker (
//	    peer_id,
//	    file_meta_id,
//	    current_hash_id,
//	    file_state
//	) VALUES ($1, $2, $3, 'uploaded')
func (q *Queries) UpdateFileTrackerMarkUploaded(ctx context.Context, db DBTX, arg *UpdateFileTrackerMarkUploadedParams) error {
	_, err := db.Exec(ctx, updateFileTrackerMarkUploaded, arg.PeerID, arg.FileMetaID, arg.CurrentHashID)
	return err
}

const uploadFilesStepOneUploadData = `-- name: UploadFilesStepOneUploadData :one
INSERT INTO file_data(
    mod_time,
    file_size,
    file_data_b
) VALUES ($1, $2, $3)
ON CONFLICT (file_hash) DO NOTHING
RETURNING 
    id, file_hash
`

type UploadFilesStepOneUploadDataParams struct {
	ModTime   pgtype.Timestamptz `json:"mod_time"`
	FileSize  int32              `json:"file_size"`
	FileDataB []byte             `json:"file_data_b"`
}

type UploadFilesStepOneUploadDataRow struct {
	ID       int32   `json:"id"`
	FileHash *string `json:"file_hash"`
}

// UploadFilesStepOneUploadData
//
//	INSERT INTO file_data(
//	    mod_time,
//	    file_size,
//	    file_data_b
//	) VALUES ($1, $2, $3)
//	ON CONFLICT (file_hash) DO NOTHING
//	RETURNING
//	    id, file_hash
func (q *Queries) UploadFilesStepOneUploadData(ctx context.Context, db DBTX, arg *UploadFilesStepOneUploadDataParams) (*UploadFilesStepOneUploadDataRow, error) {
	row := db.QueryRow(ctx, uploadFilesStepOneUploadData, arg.ModTime, arg.FileSize, arg.FileDataB)
	var i UploadFilesStepOneUploadDataRow
	err := row.Scan(&i.ID, &i.FileHash)
	return &i, err
}

const uploadFilesStepTwoUploadMetadata = `-- name: UploadFilesStepTwoUploadMetadata :one
INSERT INTO file_metadata(
    file_path, -- relative
    file_type,
    file_state, 
    file_data_id, -- file_data(id)
    file_mode,
    mod_time
) VALUES ($1,$2,'current',$3,$4, $5)
ON CONFLICT (file_path)
DO UPDATE
    SET 
        file_data_id = $4,
        mod_time = $6
RETURNING 
    id
`

type UploadFilesStepTwoUploadMetadataParams struct {
	FilePath   string             `json:"file_path"`
	FileType   string             `json:"file_type"`
	FileDataID int32              `json:"file_data_id"`
	FileMode   int32              `json:"file_mode"`
	ModTime    pgtype.Timestamptz `json:"mod_time"`
	ModTime_2  pgtype.Timestamptz `json:"mod_time_2"`
}

// UploadFilesStepTwoUploadMetadata
//
//	INSERT INTO file_metadata(
//	    file_path, -- relative
//	    file_type,
//	    file_state,
//	    file_data_id, -- file_data(id)
//	    file_mode,
//	    mod_time
//	) VALUES ($1,$2,'current',$3,$4, $5)
//	ON CONFLICT (file_path)
//	DO UPDATE
//	    SET
//	        file_data_id = $4,
//	        mod_time = $6
//	RETURNING
//	    id
func (q *Queries) UploadFilesStepTwoUploadMetadata(ctx context.Context, db DBTX, arg *UploadFilesStepTwoUploadMetadataParams) (int32, error) {
	row := db.QueryRow(ctx, uploadFilesStepTwoUploadMetadata,
		arg.FilePath,
		arg.FileType,
		arg.FileDataID,
		arg.FileMode,
		arg.ModTime,
		arg.ModTime_2,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
