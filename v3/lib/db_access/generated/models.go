// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package db_access

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type PeerRoleType string

const (
	PeerRoleTypeClient  PeerRoleType = "client"
	PeerRoleTypeStorage PeerRoleType = "storage"
	PeerRoleTypeServer  PeerRoleType = "server"
)

func (e *PeerRoleType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PeerRoleType(s)
	case string:
		*e = PeerRoleType(s)
	default:
		return fmt.Errorf("unsupported scan type for PeerRoleType: %T", src)
	}
	return nil
}

type NullPeerRoleType struct {
	PeerRoleType PeerRoleType `json:"peer_role_type"`
	Valid        bool         `json:"valid"` // Valid is true if PeerRoleType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPeerRoleType) Scan(value interface{}) error {
	if value == nil {
		ns.PeerRoleType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PeerRoleType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPeerRoleType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PeerRoleType), nil
}

type FileDatum struct {
	ID           int32              `json:"id"`
	FileHash     *string            `json:"file_hash"`
	ModTime      pgtype.Timestamptz `json:"mod_time"`
	FileSize     int32              `json:"file_size"`
	FileDataB    []byte             `json:"file_data_b"`
	CreationTime pgtype.Timestamptz `json:"creation_time"`
}

type FileMetadatum struct {
	ID           int32              `json:"id"`
	DirID        *int32             `json:"dir_id"`
	FilePath     string             `json:"file_path"`
	FileType     string             `json:"file_type"`
	FileState    string             `json:"file_state"`
	FileDataID   int32              `json:"file_data_id"`
	FileMode     int32              `json:"file_mode"`
	ModTime      pgtype.Timestamptz `json:"mod_time"`
	CreationTime pgtype.Timestamptz `json:"creation_time"`
}

type FileTracker struct {
	ID            int32              `json:"id"`
	PeerID        uuid.UUID          `json:"peer_id"`
	FileMetaID    int32              `json:"file_meta_id"`
	CurrentHashID int32              `json:"current_hash_id"`
	FileState     string             `json:"file_state"`
	LogTime       pgtype.Timestamptz `json:"log_time"`
}

type PeerDir struct {
	ID           int32              `json:"id"`
	PeerID       pgtype.UUID        `json:"peer_id"`
	CreationTime pgtype.Timestamptz `json:"creation_time"`
	DirPath      string             `json:"dir_path"`
}

type PeersTable struct {
	ID           int32              `json:"id"`
	PeerID       pgtype.UUID        `json:"peer_id"`
	IpAddress    string             `json:"ip_address"`
	PeerRole     NullPeerRoleType   `json:"peer_role"`
	PeerName     *string            `json:"peer_name"`
	CreationTime pgtype.Timestamptz `json:"creation_time"`
	Pem          []byte             `json:"pem"`
	PeerConfig   []byte             `json:"peer_config"`
}
